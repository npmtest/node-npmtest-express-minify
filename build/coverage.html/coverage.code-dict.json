{"/home/travis/build/npmtest/node-npmtest-express-minify/test.js":"/* istanbul instrument in package npmtest_express_minify */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-express-minify/lib.npmtest_express_minify.js":"/* istanbul instrument in package npmtest_express_minify */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_express_minify = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_express_minify = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-express-minify/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-express-minify && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_express_minify */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_express_minify\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_express_minify.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_express_minify.rollup.js'] =\n            local.assetsDict['/assets.npmtest_express_minify.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_express_minify.__dirname + '/lib.npmtest_express_minify.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-express-minify/node_modules/express-minify/index.js":"var crypto = require('crypto');\nvar onHeaders = require('on-headers');\n\nvar Factory = function (options) {\n  return createMiddleware(options);\n};\n\nFactory.Cache = require('./cache.js');\nFactory.Minifier = require('./minifier.js');\n\nmodule.exports = Factory;\n\nvar createMiddleware = function express_minify(options) {\n  options = options || {};\n\n  var js_match = options.js_match || /javascript/;\n  var css_match = options.css_match || /css/;\n  var sass_match = options.sass_match || /scss/;\n  var less_match = options.less_match || /less/;\n  var stylus_match = options.stylus_match || /stylus/;\n  var coffee_match = options.coffee_match || /coffeescript/;\n  var json_match = options.json_match || /json/;\n\n  var cache = new Factory.Cache(options.cache || false);\n  var minifier = new Factory.Minifier(options.uglifyJS, options.cssmin, options.onerror);\n\n  return function express_minify_middleware(req, res, next) {\n    var write = res.write;\n    var end = res.end;\n\n    var buf = null;\n    var type = Factory.Minifier.TYPE_TEXT;\n\n    onHeaders(res, function () {\n      if (req.method === 'HEAD') {\n        return;\n      }\n\n      if (res._skip) {\n        return;\n      }\n\n      var contentType = res.getHeader('Content-Type');\n      if (contentType === undefined) {\n        return;\n      }\n\n      // for sass, less, stylus, coffee module:\n      //    null: module is found but not loaded\n      //    false: module not found\n      // so we should not process false values, but allow null values\n      if (minifier.sass !== false && sass_match.test(contentType)) {\n        type = Factory.Minifier.TYPE_SASS;\n        res.setHeader('Content-Type', 'text/css');\n      } else if (minifier.less !== false && less_match.test(contentType)) {\n        type = Factory.Minifier.TYPE_LESS;\n        res.setHeader('Content-Type', 'text/css');\n      } else if (minifier.stylus !== false && stylus_match.test(contentType)) {\n        type = Factory.Minifier.TYPE_STYLUS;\n        res.setHeader('Content-Type', 'text/css');\n      } else if (minifier.coffee !== false && coffee_match.test(contentType)) {\n        type = Factory.Minifier.TYPE_COFFEE;\n        res.setHeader('Content-Type', 'text/javascript');\n      } else if (json_match.test(contentType)) {\n        type = Factory.Minifier.TYPE_JSON;\n      } else if (js_match.test(contentType)) {\n        type = Factory.Minifier.TYPE_JS;\n      } else if (css_match.test(contentType)) {\n        type = Factory.Minifier.TYPE_CSS;\n      }\n\n      if (type === Factory.Minifier.TYPE_TEXT) {\n        return;\n      }\n\n      if ((type === Factory.Minifier.TYPE_JS || type === Factory.Minifier.TYPE_CSS) && res._no_minify) {\n        return;\n      }\n\n      res.removeHeader('Content-Length');\n\n      // prepare the buffer\n      buf = [];\n    });\n\n    res.write = function (chunk, encoding) {\n      if (!this._header) {\n        this._implicitHeader();\n      }\n\n      if (buf === null) {\n        return write.call(this, chunk, encoding);\n      }\n\n      if (!this._hasBody) {\n        return true;\n      }\n\n      if (typeof chunk !== 'string' && !Buffer.isBuffer(chunk)) {\n        throw new TypeError('first argument must be a string or Buffer');\n      }\n\n      if (chunk.length === 0) {\n        return true;\n      }\n\n      // no chunked_encoding here\n      if (typeof chunk === 'string') {\n        chunk = new Buffer(chunk, encoding);\n      }\n\n      buf.push(chunk);\n    };\n\n    res.end = function (data, encoding) {\n      if (this.finished) {\n        return false;\n      }\n\n      if (!this._header) {\n        this._implicitHeader();\n      }\n\n      if (data && !this._hasBody) {\n        data = false;\n      }\n\n      if (buf === null) {\n        return end.call(this, data, encoding);\n      }\n\n      // TODO: implement hot-path optimization\n      if (data) {\n        this.write(data, encoding);\n      }\n\n      var buffer = Buffer.concat(buf);\n\n      // prepare uglify options\n      var uglifyOptions = {};\n      if (this._no_mangle) {\n        uglifyOptions.mangle = false;\n      }\n      if (this._uglifyMangle !== undefined) {\n        uglifyOptions.mangle = this._uglifyMangle;\n      }\n      if (this._uglifyOutput !== undefined) {\n        uglifyOptions.output = this._uglifyOutput;\n      }\n      if (this._uglifyCompress !== undefined) {\n        uglifyOptions.compress = this._uglifyCompress;\n      }\n\n      var minifyOptions = {\n        uglifyOpt: uglifyOptions,\n        noMinify: this._no_minify\n      };\n\n      var cacheKey = crypto.createHash('sha1').update(JSON.stringify(minifyOptions) + buffer).digest('hex').toString();\n      var self = this;\n\n      cache.layer.get(cacheKey, function (err, minized) {\n        if (err) {\n          // cache miss\n          minifier.compileAndMinify(type, minifyOptions, buffer.toString(encoding), function (err, minized) {\n            if (self._no_cache || err) {\n              // do not cache the response body\n              write.call(self, minized, 'utf8');\n              end.call(self);\n            } else {\n              cache.layer.put(cacheKey, minized, function () {\n                write.call(self, minized, 'utf8');\n                end.call(self);\n              });\n            }\n          });\n        } else {\n          // cache hit\n          write.call(self, minized, 'utf8');\n          end.call(self);\n        }\n      });\n    };\n\n    next();\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-express-minify/node_modules/express-minify/cache.js":"var fs = require('fs');\nvar path = require('path');\n\nvar FileCache = function (basePath) {\n  this.basePath = basePath;\n};\n\nFileCache.prototype.get = function (hash, callback) {\n  var destPath = this.basePath + hash;\n  fs.readFile(destPath, {encoding: 'utf8'}, function (err, data) {\n    if (err) {\n      callback(err);\n      return;\n    }\n    callback(null, data.toString());\n  });\n};\n\nFileCache.prototype.put = function (hash, minized, callback) {\n  var destPath = this.basePath + hash;\n  var tempPath = destPath + '.tmp';\n  // fix issue #3\n  fs.writeFile(tempPath, minized, {encoding: 'utf8'}, function (err) {\n    if (err) {\n      callback(err);\n      return;\n    }\n    fs.rename(tempPath, destPath, callback);\n  });\n};\n\nvar MemoryCache = function () {\n  this.cache = {};\n};\n\nMemoryCache.prototype.get = function (hash, callback) {\n  if (!this.cache.hasOwnProperty(hash)) {\n    callback(new Error('miss'));\n  } else {\n    callback(null, this.cache[hash]);\n  }\n};\n\nMemoryCache.prototype.put = function (hash, minized, callback) {\n  this.cache[hash] = minized;\n  callback();\n};\n\n/**\n * @param {String|false} cacheDirectory  false == use memory cache\n */\nvar Cache = function (cacheDirectory) {\n  this.isFileCache = (cacheDirectory !== false);\n  if (this.isFileCache) {\n    // whether the directory is writeable\n    cacheDirectory = path.normalize(cacheDirectory + '/').toString();\n    try {\n      fs.accessSync(cacheDirectory, fs.W_OK);\n    } catch (ignore) {\n      console.log('WARNING: express-minify cache directory is not writeable, fallback to memory cache.');\n      this.isFileCache = false;\n    }\n  }\n  if (this.isFileCache) {\n    this.layer = new FileCache(cacheDirectory);\n  } else {\n    this.layer = new MemoryCache();\n  }\n};\n\nmodule.exports = Cache;\n","/home/travis/build/npmtest/node-npmtest-express-minify/node_modules/express-minify/minifier.js":"var extend = require('util')._extend;\n\n/**\n * Test whether a module exists.\n * null for exists, false for not-exists.\n */\nvar testModule = function (name) {\n  var module = null;\n  try {\n    require.resolve(name);\n  } catch (ignore) {\n    module = false;\n  }\n  return module;\n};\n\nvar Minifier = function (uglifyJS, cssmin, errorHandler) {\n  this.handleError = errorHandler || Minifier.defaultErrorHandler;\n  this.uglifyJS = uglifyJS || require('uglify-js');\n  this.cssmin = cssmin || require('cssmin');\n  this.sass = testModule('node-sass');\n  this.less = testModule('less');\n  this.stylus = testModule('stylus');\n  this.coffee = testModule('coffee-script');\n};\n\nMinifier.TYPE_TEXT = 0;\nMinifier.TYPE_JS = 1;\nMinifier.TYPE_CSS = 2;\nMinifier.TYPE_SASS = 3;\nMinifier.TYPE_LESS = 4;\nMinifier.TYPE_STYLUS = 5;\nMinifier.TYPE_COFFEE = 6;\nMinifier.TYPE_JSON = 7;\n\nMinifier.defaultErrorHandler = function (err, stage, assetType, minifyOptions, body, callback) {\n  if (stage === 'compile') {\n    callback(err, JSON.stringify(err));\n    return;\n  }\n  callback(err, body);\n};\n\nMinifier.prototype.compileAndMinify = function (assetType, minifyOptions, body, callback) {\n  if (typeof callback !== 'function') {\n    return;\n  }\n\n  var self = this;\n  var result, opt;\n\n  switch (assetType) {\n  case Minifier.TYPE_JS:\n    result = body;\n    try {\n      if (!minifyOptions.noMinify) {\n        opt = extend({fromString: true}, minifyOptions.uglifyOpt);\n        result = self.uglifyJS.minify(result, opt).code;\n      }\n    } catch (err) {\n      self.handleError(err, 'minify', assetType, minifyOptions, result, callback);\n      return;\n    }\n    callback(null, result);\n    break;\n  case Minifier.TYPE_CSS:\n    result = body;\n    try {\n      if (!minifyOptions.noMinify) {\n        result = self.cssmin(result);\n      }\n    } catch (err) {\n      self.handleError(err, 'minify', assetType, minifyOptions, result, callback);\n      return;\n    }\n    callback(null, result);\n    break;\n  case Minifier.TYPE_SASS:\n    if (!self.sass) {\n      self.sass = require('node-sass');\n    }\n    result = body;\n    try {\n      result = self.sass.renderSync({\n        data: result\n      }).css.toString();\n    } catch (err) {\n      self.handleError(err, 'compile', assetType, minifyOptions, result, callback);\n      return;\n    }\n    try {\n      if (!minifyOptions.noMinify) {\n        result = self.cssmin(result);\n      }\n    } catch (err) {\n      self.handleError(err, 'minify', assetType, minifyOptions, result, callback);\n      return;\n    }\n    callback(null, result);\n    break;\n  case Minifier.TYPE_LESS:\n    if (!self.less) {\n      self.less = require('less');\n    }\n    result = body;\n    self.less.render(result, function (err, output) {\n      if (err) {\n        self.handleError(err, 'compile', assetType, minifyOptions, result, callback);\n        return;\n      }\n      result = output.css;\n      try {\n        if (!minifyOptions.noMinify) {\n          result = self.cssmin(result);\n        }\n      } catch (err) {\n        self.handleError(err, 'minify', assetType, minifyOptions, result, callback);\n        return;\n      }\n      callback(null, result);\n    });\n    break;\n  case Minifier.TYPE_STYLUS:\n    if (!self.stylus) {\n      self.stylus = require('stylus');\n    }\n    result = body;\n    self.stylus.render(result, function (err, css) {\n      if (err) {\n        self.handleError(err, 'compile', assetType, minifyOptions, result, callback);\n        return;\n      }\n      result = css;\n      try {\n        if (!minifyOptions.noMinify) {\n          result = self.cssmin(result);\n        }\n      } catch (err) {\n        self.handleError(err, 'minify', assetType, minifyOptions, result, callback);\n        return;\n      }\n      callback(null, result);\n    });\n    break;\n  case Minifier.TYPE_COFFEE:\n    if (!self.coffee) {\n      self.coffee = require('coffee-script');\n    }\n    result = body;\n    try {\n      result = self.coffee.compile(result);\n    } catch (err) {\n      self.handleError(err, 'compile', assetType, minifyOptions, result, callback);\n      return;\n    }\n    try {\n      if (!minifyOptions.noMinify) {\n        opt = extend({fromString: true}, minifyOptions.uglifyOpt);\n        result = self.uglifyJS.minify(result, opt).code;\n      }\n    } catch (err) {\n      self.handleError(err, 'minify', assetType, minifyOptions, result, callback);\n      return;\n    }\n    callback(null, result);\n    break;\n  case Minifier.TYPE_JSON:\n    result = body;\n    try {\n      if (!minifyOptions.noMinify) {\n        result = JSON.stringify(JSON.parse(result));\n      }\n    } catch (err) {\n      self.handleError(err, 'minify', assetType, minifyOptions, result, callback);\n      return;\n    }\n    callback(null, result);\n    break;\n  default:\n    callback(null, body);\n    break;\n  }\n};\n\nmodule.exports = Minifier;\n"}